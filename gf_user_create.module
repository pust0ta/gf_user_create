<?php

define('GF_ADMIN_RID', 3);
define('GF_MANAGER_SADOVOD_RID', 18);
define('GF_KLIENT_SADOVOD_RID', 19);
define('GF_TORGOVIJ_PREDSTAVITEL_RID', 24);
define('GF_KLIENT_TP_RID', 15);
define('GF_OPTOVIK_RID', 7);
define('GF_MSK_OFIS_RID', 20);
define('GF_MANAGER_RID', 5);
define('GF_INTERESUJUSHIJSYA_RID', 4);

/**
 * Implements hook_menu().
 * Создаётся страница, на которой размещается форма.
 */
function gf_user_create_menu() {
  $items['gf-user/create'] = array(
    'title' => t('Create account for new client'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_user_create_form'],
    'access arguments' => array('gf user create'),
  );

  return $items;
}


/**
 * Форма создания нового клиента.
 */
function gf_user_create_form($form, &$form_state) {
  if (isset($form_state['success'])) {
    unset($form_state['success']);
    $form['success'] = array(
      '#markup' => l(t('Add more'), current_path(), array('attributes' => array(
        'class' => array('btn', 'btn-fw', 'btn-primary')))),
    );

    return $form;
  }

  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#placeholder' => t('Name of the Customer or Company name'),
  );
  $form['contact_person'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact Person'),
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#placeholder' => '8 (901) 234-56-78',
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('e-mail'),
    '#placeholder' => 'name@example.com',
    '#required' => TRUE,
  );
  $form['region'] = array(
    '#type' => 'textfield',
    '#title' => t('Region'),
  );
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
  );
  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
  );
  $form['vat_id'] = array(
    '#type' => 'textfield',
    '#title' => t('VAT ID'),
  );
  $form['cargo_company'] = array(
    '#type' => 'textfield',
    '#title' => t('Cargo company'),
  );

  if ($roles = gf_user_create_get_roles()) {
    $form['roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Assign Role'),
      '#options' => $roles,
    );
  }


  if (user_access('masquerade as user')) {
    $form['masq'] = array(
      '#type' => 'checkbox',
      '#title' => t('Masquerade to new user'),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create new account'),
  );

  return $form;
}

/**
 * @param $form
 * @param $form_state
 *
 * Валидация данных, введённых в форму
 */
function gf_user_create_form_validate($form, $form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('Not a valid email address'));
  }

  $phone = str_replace(array('(',')',' ','-', '+'),'', trim($form_state['values']['phone']));
  // $phone_check = preg_match('/^8 \(\d{3}\) \d{3}-\d{2}-\d{2}$/', $phone);
  $phone_check = preg_match('/^8\d{10}$/', $phone);
  if (!$phone_check) {
    form_set_error('phone', t('Phone number is wrong. Ex: 8 (123) 456-78-99 or 81234567899'));
  }
  elseif(user_load_by_name($phone)) {
    form_set_error('phone', t('Phone number is already used'));
  } 

  if($name = trim($form_state['values']['name'])) {
    if (user_load_by_name($name)) {
      form_set_error('name', t('User with this name already exist'));
    } 
  }

  if (user_load_by_mail($form_state['values']['email'])) {
    form_set_error('email', t('User with this email already exists.'));
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * @throws \Exception
 *
 * При отправке формы производятся следующие действия:
 * 1. создание нового пользователя с ролью "Оптовый клиент
 * 2. переключение на этого пользователя средствами masquerade
 * 3. переадресация на страницу каталога товаров
 */
function gf_user_create_form_submit($form, &$form_state) {
  global $user;

  $manager_user = user_load($user->uid);
  $manager_nid = $manager_user->field_manager["und"][0]["target_id"] ?? FALSE;



  $values = $form_state['values'];

  //очистка поля "телефон" от лишних символов, чтобы оно было пригодно для логина
  $phone = str_replace(array('(',')',' ','-', '+'),'', trim($values['phone']));
  $contact_person = $values['contact_person'];
  $region = $values['region'];
  $city = $values['city'];
  $address = $values['address'];
  $cargo_company = $values['cargo_company'];
  $vat_id = $values['vat_id'];

  $name = $values['name'] ?: $phone;
  $email = $values['email'] ?: 'customer+' . $phone . '@giorgio-ferretti.it';

  $password = user_password(8);
  $new_customer = [
    'pass' => $password,
    'mail' => $email,
    'language' => 'ru',
    'field_kompaniya' => [LANGUAGE_NONE => [0 => ['value' => $values['name']]]],
    'field_contact_person' => [LANGUAGE_NONE => [0 => ['value' => $contact_person]]],
    'field_region' => [LANGUAGE_NONE => [0 => ['value' => $region]]],
    'field_telefon' => [LANGUAGE_NONE => [0 => ['value' => $phone]]],
    'timezone' => 'Europe/Moscow',
    'field_firstname' => [LANGUAGE_NONE => [0 => ['value' => $name]]],
    'field_gorod' => [LANGUAGE_NONE => [0 => ['value'=> $city]]],
    'field_adres' => [LANGUAGE_NONE => [0 => ['value'=> $address]]],
    'field_tk' => [LANGUAGE_NONE => [0 => ['value'=> $cargo_company]]],
    'field_macroregion' => [LANGUAGE_NONE => [0 => ["value" => 'Russia']]],
    'field_country_name' => [LANGUAGE_NONE => [0 => ["value" => 'RU']]],
    'field_language_pref' => [LANGUAGE_NONE => [0 => ["value" => 'ru']]],
    'status' => 1,
    'init' => $email,
  ];

  if ($manager_nid) {
    $new_customer['field_manager'][LANGUAGE_NONE][0]['target_id'] = $manager_nid;
  }


  $site_roles = user_roles(TRUE);

  if (user_has_role(GF_MANAGER_SADOVOD_RID)) {
    $new_customer['roles'] = [
      GF_KLIENT_SADOVOD_RID => $site_roles[GF_KLIENT_SADOVOD_RID],
    ];
  } 
  elseif (user_has_role(GF_TORGOVIJ_PREDSTAVITEL_RID)) {
    $new_customer['roles'] = [
      GF_KLIENT_TP_RID => $site_roles[GF_KLIENT_TP_RID],
      GF_INTERESUJUSHIJSYA_RID => $site_roles[GF_INTERESUJUSHIJSYA_RID],
    ];
  } 
  else {
    $new_customer['roles'] = $values['roles'];
  }

  // Если имени мы так и не получили - используем
  // в этом качестве почту.
  $new_customer['name'] = $new_customer['name'] ?: ($name ?: $values['email']);

  // The first parameter is null so a new user is created.
  $new_user = user_save(null, $new_customer);
  $new_user->password = $password;

  $mail_status = drupal_mail('user', 'register_admin_created', $email, NULL, array('account' => $new_user), 
  variable_get('site_mail', 'info@giorgio-ferretti.it'));


  if ($new_user && $mail_status) {
    if (isset($values['masq']) && $values['masq']) {
      masquerade_switch_user($new_user->uid);
      drupal_goto('gf_stock/region_switch/Russia', array('query'=>array('destination'=>'shop')));
    }
    else {
      drupal_set_message(t('New account created successfully'));
      $form_state['rebuild'] = TRUE;
      $form_state['success'] = TRUE;
    }
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
  }
}

/**
 * Implements hook_permission().
 */
function gf_user_create_permission() {
  return [
    'gf user create' => [
      'title' => t('Create new customer'),
      'description' => t('Create new wholesaler customer from simple form'),
    ],
  ];
}

/**
 *  * Implements hook_token_info().
 *   */
function gf_user_create_token_info() {
  $info['tokens']['user']['password'] = array(
    'name' => t('Password'),
    'description' => t('The password by the user'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function gf_user_create_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
      case 'password':
        $replacements[$original] = $account->password;
        break;
      }
    }
  }

  return $replacements;
}

/**
 * Получаем роли для выбора в форме.
 *
 */
function gf_user_create_get_roles() {
  $site_roles = user_roles(TRUE);
  $roles = [];
  if (user_has_role(GF_MANAGER_RID) or user_has_role(GF_ADMIN_RID)) {
    $roles = [
      GF_INTERESUJUSHIJSYA_RID => $site_roles[GF_INTERESUJUSHIJSYA_RID],
      GF_OPTOVIK_RID => $site_roles[GF_OPTOVIK_RID],
      GF_MSK_OFIS_RID => $site_roles[GF_MSK_OFIS_RID],
    ];
  }

  return $roles;
}
